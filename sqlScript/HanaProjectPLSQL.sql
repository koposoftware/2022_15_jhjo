SELECT * FROM INDU_TYPE;
SELECT * FROM CARD_INFO;
SELECT * FROM CARD_COMMENT;
SELECT * FROM CARD_BENE;
SELECT * FROM ALI_INFO ORDER BY ALI_CODE;
SELECT * FROM BENE_INFO;
SELECT * FROM ANNUAL_FEE;
SELECT * FROM INDU_TYPE;
SELECT * FROM TRAN_CATE A, INDU_TYPE B
WHERE  A.INDUSTRY_CODE = B.INDU_CODE;
SELECT * FROM CARD_IMG;
SELECT * FROM TRAN_CATE;
--
--DELETE FROM CALENDAR;
--DELETE TRAN_INFO;
--DELETE CLUSTERED_CUSTOMER;
--DELETE FROM CUSTOMER_CARD_INFO;
--DELETE FROM CUSTOMER_INFO;
--COMMIT;

--회원 2명의 소비내역을 변경하고 싶으시면은 TRAN_INFO와 CUSTOMER와 CARD INFO를 변경해주세요 

SELECT * FROM CALENDAR;
SELECT * FROM TRAN_INFO ORDER BY TRAN_NUM;
SELECT * FROM CLUSTERED_CUSTOMER ORDER BY MEMBER_NUM;
SELECT * FROM CUSTOMER_CARD_INFO ORDER BY MEMBER_NUM;
SELECT * FROM CUSTOMER_INFO ORDER BY MEMBER_NUM;

COMMIT;

--fakers로 만들어야 할 데이터 
SELECT * FROM CARD_INFO;

SELECT DISTINCT CARD_NAME FROM CARD_INFO WHERE SORT_CARD = '체크 카드';


--실제 카드를 갖고 그 카드의 세부 카드의 종류를 구해옴. 
--실제 그 카드의 카드 혜택을 보자~! 


--효용 계산을 위한 카드 혜택 테이블 생성
CREATE TABLE MY_CARD_BENEFIT(
    SMALL_CATE VARCHAR2(100),
    CARD_BENEFIT NUMBER(8),
    ALI_TYPE VARCHAR2(90)
);

SET SERVEROUTPUT ON;
VAR TEST_CURSOR REFCURSOR;
EXECUTE CALC_CARD_CATE_BENEFIT('5739-9127-6178-3574',:TEST_CURSOR);
PRINT TEST_CURSOR;

--지난 달에 내가 특정 카드로 얻은 카드 소비 효용 계산 
CREATE OR REPLACE PROCEDURE CALC_CARD_CATE_BENEFIT(P_CARD_NUM IN VARCHAR2,CUR_BENEFIT_LIST OUT SYS_REFCURSOR)
AS   
    V_TRAN_CATE_NUM VARCHAR2(30);
    V_AMOUNT_OF_BUSI NUMBER(10);
    V_CARD_BENEFIT NUMBER(10);
    V_SMALL_CATE VARCHAR2(100);
    V_ALI_TYPE VARCHAR2(90);
    
    CURSOR CUR_CONSUME_HISTORY
    IS
    SELECT TRAN_CATE_NUM,SUM(AMOUNT_OF_BUSI)
    FROM CARD_CONSUMPTION_HISTORY
    WHERE CARD_NUM = P_CARD_NUM
    AND TO_DATE(DATE_OF_USE,'YYYY-MM-DD HH24:MI:SS') BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1) AND LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1))
    GROUP BY TRAN_CATE_NUM;
    
    CURSOR CUR_SMALL_CATE
    IS 
    SELECT SMALL_CATE,ALI_TYPE 
    FROM CARD_BENEFIT_VIEW
    WHERE BENE_CODE = V_TRAN_CATE_NUM; 
    
BEGIN
    DELETE FROM MY_CARD_BENEFIT;
    OPEN CUR_CONSUME_HISTORY;
    LOOP
        FETCH CUR_CONSUME_HISTORY INTO V_TRAN_CATE_NUM,V_AMOUNT_OF_BUSI;
        EXIT WHEN CUR_CONSUME_HISTORY%NOTFOUND;
            OPEN CUR_SMALL_CATE;
            LOOP
                FETCH CUR_SMALL_CATE INTO V_SMALL_CATE,V_ALI_TYPE;
                EXIT WHEN CUR_SMALL_CATE%NOTFOUND;
            END LOOP;  
            CLOSE CUR_SMALL_CATE;
        V_CARD_BENEFIT := CALC_BENEFIT_SUM(V_TRAN_CATE_NUM,V_AMOUNT_OF_BUSI,P_CARD_NUM);
        IF V_CARD_BENEFIT !=0 THEN
            INSERT INTO MY_CARD_BENEFIT(SMALL_CATE,CARD_BENEFIT,ALI_TYPE) VALUES(V_SMALL_CATE,V_CARD_BENEFIT,V_ALI_TYPE);
        ELSE 
            DBMS_OUTPUT.PUT_LINE('INSERT 하면 안됨!');
        END IF;    
    END LOOP;
    COMMIT;
    OPEN CUR_BENEFIT_LIST FOR SELECT SMALL_CATE,CARD_BENEFIT,ALI_TYPE FROM MY_CARD_BENEFIT;
END;
/

--실제 내가 가진 카드로 얻을 카드 효용을 계산해줌. 
SET SERVEROUTPUT ON;
VAR TEST2 NUMBER;
EXECUTE CALC_BENEFIT('1823-6856-3323-3203',1,:TEST2);
PRINT TEST2


CREATE OR REPLACE PROCEDURE CALC_BENEFIT(P_CARD_NUM IN VARCHAR2,P_MONTH IN NUMBER,PO_BENEFIT IN OUT NUMBER)
AS 

CURSOR CUR_CONSUME_HISTORY
IS 
SELECT TRAN_CATE_NUM,SUM(AMOUNT_OF_BUSI)
FROM CARD_CONSUMPTION_HISTORY
WHERE CARD_NUM=P_CARD_NUM
AND TO_DATE(DATE_OF_USE,'YYYY-MM-DD HH24:MI:SS') BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MM'),-P_MONTH) AND LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-P_MONTH))
GROUP BY TRAN_CATE_NUM;
CURSOR CUR_ANNUAL_FEE
IS 
SELECT ANNUAL_FEE
FROM CARD_INFO
WHERE CARD_SEG_NUM = (
SELECT CARD_SEG_NUM 
FROM CUSTOMER_CARD_INFO
WHERE CARD_NUM =P_CARD_NUM); 
 
P_AMOUNT_OF_BUSI NUMBER :=0;
P_TRAN_CATE_NUM VARCHAR2(60);
V_ANNUAL_FEE NUMBER :=0;
BEGIN 
    PO_BENEFIT :=0;
    OPEN CUR_ANNUAL_FEE;
    LOOP 
        FETCH CUR_ANNUAL_FEE INTO V_ANNUAL_FEE;
        EXIT WHEN CUR_ANNUAL_FEE%NOTFOUND;
    END LOOP;    
    
    OPEN CUR_CONSUME_HISTORY;
    LOOP
        FETCH CUR_CONSUME_HISTORY INTO P_TRAN_CATE_NUM,P_AMOUNT_OF_BUSI;
        EXIT WHEN CUR_CONSUME_HISTORY%NOTFOUND;
        PO_BENEFIT := PO_BENEFIT + CALC_BENEFIT_SUM(P_TRAN_CATE_NUM,P_AMOUNT_OF_BUSI,P_CARD_NUM);
    END LOOP;
    PO_BENEFIT := PO_BENEFIT - V_ANNUAL_FEE/12;
    DBMS_OUTPUT.PUT_LINE('PO_BENEFIT 무엇이 들어오나?'||PO_BENEFIT);
END CALC_BENEFIT;
/

--이거 위에 프로시저에 집어넣을 예정임. 

CREATE OR REPLACE FUNCTION CALC_BENEFIT_SUM(P_TRAN_CATE_NUM IN VARCHAR2, P_AMOUNT IN NUMBER, P_CARD_NUM IN VARCHAR2)
RETURN NUMBER
IS
    CURSOR CUR_CARD_BENEFIT IS
        SELECT BENE_RATE,BENE_LIMIT
        FROM CARD_DETAIL_BENEFIT
        WHERE CARD_CATE_NUM=(
        SELECT CARD_CATE_NUM FROM CARD_INFO
        WHERE CARD_SEG_NUM = (
        SELECT CARD_SEG_NUM    
        FROM CUSTOMER_CARD_INFO
        WHERE CARD_NUM = P_CARD_NUM AND BENE_CODE = P_TRAN_CATE_NUM)); 
    V_DISCOUNT NUMBER := 0;
    V_BENE_LIMIT NUMBER := 0;
    V_BENEFIT NUMBER := 0;
BEGIN
    OPEN CUR_CARD_BENEFIT;
    LOOP 
        FETCH CUR_CARD_BENEFIT INTO V_DISCOUNT,V_BENE_LIMIT;
        EXIT WHEN CUR_CARD_BENEFIT%NOTFOUND;
        IF
            P_AMOUNT * V_DISCOUNT>V_BENE_LIMIT THEN
            V_BENEFIT := V_BENE_LIMIT;
        ELSE 
            V_BENEFIT := P_AMOUNT * V_DISCOUNT;
        END IF;
    END LOOP;   
    DBMS_OUTPUT.PUT_LINE('V_BENEFIT 무엇이 들어오나?'||V_BENEFIT);
    RETURN V_BENEFIT;
    CLOSE CUR_CARD_BENEFIT;
END CALC_BENEFIT_SUM;
/


--카드 순위 구하기
--DROP TABLE RANK_TABLE;
--CREATE GLOBAL TEMPORARY TABLE RANK_TABLE(
--    CARD_CATE_NUM VARCHAR2(50),
--    CARD_BENEFIT NUMBER(8),
--    CARD_IMG_URL VARCHAR2(70),
--    CARD_ANNUAL_FEE NUMBER(8)
--) ON COMMIT DELETE ROWS;
--DROP TABLE RANK_TABLE;

CREATE TABLE RANK_TABLE(
    CARD_CATE_NUM VARCHAR2(50),
    CARD_BENEFIT NUMBER(8),
    CARD_IMG_URL VARCHAR2(70),
    CARD_ANNUAL_FEE NUMBER(8),
    CARD_NAME VARCHAR2(80)
);

CREATE TABLE RECOMMEND_BENEFIT_TABLE(
    SMALL_CATE VARCHAR2(100),
    CARD_BENEFIT NUMBER(8) 
);


VAR OL_CURSOR REFCURSOR
EXEC CALC_CREDIT_BENEFIT_RANK(10,:OL_CURSOR)
PRINT OL_CURSOR

VAR OL_CURSOR REFCURSOR
EXEC CALC_CHECK_BENEFIT_RANK(10,:OL_CURSOR)
PRINT OL_CURSOR



--3개월치 데이터를 기준으로 판단하자! 


CREATE OR REPLACE PROCEDURE CALC_CHECK_BENEFIT_RANK(P_MEMBER_NUM IN NUMBER,CUR_BENEFIT_RANK OUT SYS_REFCURSOR)
AS 

P_AMOUNT_OF_BUSI NUMBER :=0;
P_TRAN_CATE_NUM VARCHAR2(60);
V_CARD_CATE_NUM VARCHAR2(40);
V_TRAN_CATE_BENEFIT NUMBER(8);
V_CARD_IMG_URL VARCHAR2(80);
V_ANNUAL_FEE NUMBER :=0;
V_CARD_NAME VARCHAR2(80);

CURSOR CUR_CARD_DETAIL_BENEFIT
IS 
SELECT A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE,C.CARD_NAME
FROM CARD_DETAIL_BENEFIT A , CARD_IMG B,CARD_INFO C
WHERE A.CARD_CATE_NUM = B.CARD_CATE_NUM AND A.CARD_CATE_NUM = C.CARD_CATE_NUM AND C.SORT_CARD='체크 카드'
GROUP BY A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE,C.CARD_NAME;

CURSOR CUR_CARD_BENE_SUM
IS
SELECT * 
FROM RANK_TABLE;

CURSOR CUR_CONSUME_HISTORY
IS 
SELECT TRAN_CATE_NUM,CEIL(SUM(AMOUNT_OF_BUSI)/3)
FROM CARD_CONSUMPTION_HISTORY
WHERE MEMBER_NUM = P_MEMBER_NUM
AND TO_DATE(DATE_OF_USE,'YYYY-MM-DD HH24:MI:SS') BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MM'),-3) AND LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1))
GROUP BY TRAN_CATE_NUM;

BEGIN
    DELETE FROM RANK_TABLE;
    OPEN CUR_CARD_DETAIL_BENEFIT;
    LOOP
        FETCH CUR_CARD_DETAIL_BENEFIT INTO V_CARD_CATE_NUM,V_CARD_IMG_URL,V_ANNUAL_FEE,V_CARD_NAME; 
        EXIT WHEN CUR_CARD_DETAIL_BENEFIT%NOTFOUND;
        OPEN CUR_CONSUME_HISTORY;
            LOOP 
            FETCH CUR_CONSUME_HISTORY INTO P_TRAN_CATE_NUM,P_AMOUNT_OF_BUSI;
            V_TRAN_CATE_BENEFIT :=0;
            EXIT WHEN CUR_CONSUME_HISTORY%NOTFOUND;
            V_TRAN_CATE_BENEFIT := BENEFIT_TRAN_CALC(V_CARD_CATE_NUM,P_TRAN_CATE_NUM,P_AMOUNT_OF_BUSI);      
            INSERT INTO RANK_TABLE(CARD_CATE_NUM,CARD_BENEFIT,CARD_IMG_URL,CARD_ANNUAL_FEE,CARD_NAME) VALUES(V_CARD_CATE_NUM,V_TRAN_CATE_BENEFIT,V_CARD_IMG_URL,V_ANNUAL_FEE,V_CARD_NAME);
            END LOOP; 
        CLOSE CUR_CONSUME_HISTORY;    
    END LOOP;
    COMMIT;
    OPEN CUR_BENEFIT_RANK FOR SELECT CARD_CATE_NUM,CEIL(SUM(CARD_BENEFIT)-(AVG(CARD_ANNUAL_FEE)/12)) AS BENEFIT,CARD_IMG_URL,CARD_NAME FROM RANK_TABLE GROUP BY CARD_CATE_NUM,CARD_IMG_URL,CARD_NAME ORDER BY BENEFIT DESC; 
END CALC_CHECK_BENEFIT_RANK;
/

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE CALC_CREDIT_BENEFIT_RANK(P_MEMBER_NUM IN NUMBER,CUR_BENEFIT_RANK OUT SYS_REFCURSOR)
AS 

P_AMOUNT_OF_BUSI NUMBER :=0;
P_TRAN_CATE_NUM VARCHAR2(60);
V_CARD_CATE_NUM VARCHAR2(40);
V_TRAN_CATE_BENEFIT NUMBER(8);
V_CARD_IMG_URL VARCHAR2(80);
V_ANNUAL_FEE NUMBER :=0;
V_CARD_NAME VARCHAR2(80);

CURSOR CUR_CARD_DETAIL_BENEFIT
IS 
SELECT A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE,C.CARD_NAME
FROM CARD_DETAIL_BENEFIT A , CARD_IMG B,CARD_INFO C
WHERE A.CARD_CATE_NUM = B.CARD_CATE_NUM AND A.CARD_CATE_NUM = C.CARD_CATE_NUM AND C.SORT_CARD='신용 카드'
GROUP BY A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE,C.CARD_NAME;

CURSOR CUR_CARD_BENE_SUM
IS
SELECT * 
FROM RANK_TABLE;

CURSOR CUR_CONSUME_HISTORY
IS 
SELECT TRAN_CATE_NUM,CEIL(SUM(AMOUNT_OF_BUSI)/3)
FROM CARD_CONSUMPTION_HISTORY
WHERE MEMBER_NUM = P_MEMBER_NUM
AND TO_DATE(DATE_OF_USE,'YYYY-MM-DD HH24:MI:SS') BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MM'),-3) AND LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1))
GROUP BY TRAN_CATE_NUM;

BEGIN
    DELETE FROM RANK_TABLE;
    OPEN CUR_CARD_DETAIL_BENEFIT;
    LOOP
        FETCH CUR_CARD_DETAIL_BENEFIT INTO V_CARD_CATE_NUM,V_CARD_IMG_URL,V_ANNUAL_FEE,V_CARD_NAME; 
        EXIT WHEN CUR_CARD_DETAIL_BENEFIT%NOTFOUND;
        OPEN CUR_CONSUME_HISTORY;
            LOOP 
            FETCH CUR_CONSUME_HISTORY INTO P_TRAN_CATE_NUM,P_AMOUNT_OF_BUSI;
            V_TRAN_CATE_BENEFIT :=0;
            EXIT WHEN CUR_CONSUME_HISTORY%NOTFOUND;
            V_TRAN_CATE_BENEFIT := BENEFIT_TRAN_CALC(V_CARD_CATE_NUM,P_TRAN_CATE_NUM,P_AMOUNT_OF_BUSI);      
            INSERT INTO RANK_TABLE(CARD_CATE_NUM,CARD_BENEFIT,CARD_IMG_URL,CARD_ANNUAL_FEE,CARD_NAME) VALUES(V_CARD_CATE_NUM,V_TRAN_CATE_BENEFIT,V_CARD_IMG_URL,V_ANNUAL_FEE,V_CARD_NAME);
            END LOOP; 
        CLOSE CUR_CONSUME_HISTORY;    
    END LOOP;
    COMMIT;
    OPEN CUR_BENEFIT_RANK FOR SELECT CARD_CATE_NUM,CEIL(SUM(CARD_BENEFIT)-(AVG(CARD_ANNUAL_FEE)/12)) AS BENEFIT,CARD_IMG_URL,CARD_NAME FROM RANK_TABLE GROUP BY CARD_CATE_NUM,CARD_IMG_URL,CARD_NAME ORDER BY BENEFIT DESC; 
END CALC_CREDIT_BENEFIT_RANK;
/


VAR OL_CURSOR REFCURSOR
EXEC CALC_RECOMMENDED_BENEFIT(1,'CR00001',:OL_CURSOR)
PRINT OL_CURSOR

CREATE OR REPLACE PROCEDURE CALC_RECOMMENDED_BENEFIT(P_MEMBER_NUM IN NUMBER,P_CARD_CATE_NUM IN VARCHAR2, CUR_BENEFIT OUT SYS_REFCURSOR)
AS 

P_AMOUNT_OF_BUSI NUMBER :=0;
P_TRAN_CATE_NUM VARCHAR2(60);
V_CARD_CATE_NUM VARCHAR2(40);
V_TRAN_CATE_BENEFIT NUMBER(8);
V_CARD_IMG_URL VARCHAR2(80);
V_ANNUAL_FEE NUMBER :=0;
V_SMALL_CATE VARCHAR2(100);

CURSOR CUR_CARD_DETAIL_BENEFIT
IS 
SELECT A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE
FROM CARD_DETAIL_BENEFIT A, CARD_IMG B,CARD_INFO C
WHERE A.CARD_CATE_NUM = B.CARD_CATE_NUM AND A.CARD_CATE_NUM = C.CARD_CATE_NUM AND C.CARD_CATE_NUM=P_CARD_CATE_NUM
GROUP BY A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE;

CURSOR CUR_RECOMMENDED_CARD_BENE
IS
SELECT * 
FROM RECOMMEND_BENEFIT_TABLE;

CURSOR CUR_CONSUME_HISTORY
IS 
SELECT TRAN_CATE_NUM,SMALL_CATE,CEIL(SUM(AMOUNT_OF_BUSI)/3)
FROM CARD_CONSUMPTION_HISTORY
WHERE MEMBER_NUM = P_MEMBER_NUM
AND TO_DATE(DATE_OF_USE,'YYYY-MM-DD HH24:MI:SS') BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MM'),-3) AND LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1))
GROUP BY TRAN_CATE_NUM,SMALL_CATE;

BEGIN
    DELETE FROM RECOMMEND_BENEFIT_TABLE;
    OPEN CUR_CARD_DETAIL_BENEFIT;
    LOOP
        FETCH CUR_CARD_DETAIL_BENEFIT INTO V_CARD_CATE_NUM,V_CARD_IMG_URL,V_ANNUAL_FEE; 
        EXIT WHEN CUR_CARD_DETAIL_BENEFIT%NOTFOUND;
        OPEN CUR_CONSUME_HISTORY;
            LOOP 
                FETCH CUR_CONSUME_HISTORY INTO P_TRAN_CATE_NUM,V_SMALL_CATE,P_AMOUNT_OF_BUSI;
                    V_TRAN_CATE_BENEFIT :=0;
                    EXIT WHEN CUR_CONSUME_HISTORY%NOTFOUND;
                    V_TRAN_CATE_BENEFIT := BENEFIT_TRAN_CALC(V_CARD_CATE_NUM,P_TRAN_CATE_NUM,P_AMOUNT_OF_BUSI);
                    IF V_TRAN_CATE_BENEFIT !=0 THEN
                        INSERT INTO RECOMMEND_BENEFIT_TABLE(SMALL_CATE,CARD_BENEFIT) VALUES(V_SMALL_CATE,V_TRAN_CATE_BENEFIT);
                        DBMS_OUTPUT.PUT_LINE('들어는 오냐>?'||V_TRAN_CATE_BENEFIT);
                    ELSE
                        DBMS_OUTPUT.PUT_LINE('들어오지 말아야할게 들어왔구나?'||V_TRAN_CATE_BENEFIT);
                    END IF;      
            END LOOP; 
        CLOSE CUR_CONSUME_HISTORY;    
    END LOOP;
    COMMIT;
    OPEN CUR_BENEFIT FOR SELECT SMALL_CATE,SUM(CARD_BENEFIT) AS BENEFIT FROM RECOMMEND_BENEFIT_TABLE GROUP BY SMALL_CATE; 
END CALC_RECOMMENDED_BENEFIT;
/



VAR OL_CURSOR REFCURSOR
EXEC CALC_RECOMMENDED_BENEFIT_SUM(10,'CR00001',:OL_CURSOR)
PRINT OL_CURSOR


--찜한 카드 효용계산해보자.. 

CREATE TABLE RECOMMEND_BENEFIT_SUM_TABLE(
    SMALL_CATE VARCHAR2(100),
    CARD_BENEFIT NUMBER(8),
    ANNUAL_FEE NUMBER(8)
);


CREATE OR REPLACE PROCEDURE CALC_RECOMMENDED_BENEFIT_SUM(P_MEMBER_NUM IN NUMBER,P_CARD_CATE_NUM IN VARCHAR2, CUR_BENEFIT OUT SYS_REFCURSOR)
AS 

P_AMOUNT_OF_BUSI NUMBER := 0;
P_TRAN_CATE_NUM VARCHAR2(60);
V_CARD_CATE_NUM VARCHAR2(40);
V_TRAN_CATE_BENEFIT NUMBER(8);
V_CARD_IMG_URL VARCHAR2(80);
V_ANNUAL_FEE NUMBER := 0;
V_SMALL_CATE VARCHAR2(100);

CURSOR CUR_CARD_DETAIL_BENEFIT
IS 
SELECT A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE
FROM CARD_DETAIL_BENEFIT A, CARD_IMG B,CARD_INFO C
WHERE A.CARD_CATE_NUM = B.CARD_CATE_NUM AND A.CARD_CATE_NUM = C.CARD_CATE_NUM AND C.CARD_CATE_NUM=P_CARD_CATE_NUM
GROUP BY A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE;

CURSOR CUR_RECOMMENDED_CARD_BENE
IS
SELECT * 
FROM RECOMMEND_BENEFIT_SUM_TABLE;

CURSOR CUR_CONSUME_HISTORY
IS 
SELECT TRAN_CATE_NUM,SMALL_CATE,CEIL(SUM(AMOUNT_OF_BUSI)/3)
FROM CARD_CONSUMPTION_HISTORY
WHERE MEMBER_NUM = P_MEMBER_NUM
AND TO_DATE(DATE_OF_USE,'YYYY-MM-DD HH24:MI:SS') BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MM'),-3) AND LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1))
GROUP BY TRAN_CATE_NUM,SMALL_CATE;

BEGIN
    DELETE FROM RECOMMEND_BENEFIT_SUM_TABLE;
    OPEN CUR_CARD_DETAIL_BENEFIT;
    LOOP
        FETCH CUR_CARD_DETAIL_BENEFIT INTO V_CARD_CATE_NUM,V_CARD_IMG_URL,V_ANNUAL_FEE; 
        EXIT WHEN CUR_CARD_DETAIL_BENEFIT%NOTFOUND;
        OPEN CUR_CONSUME_HISTORY;
            LOOP 
                FETCH CUR_CONSUME_HISTORY INTO P_TRAN_CATE_NUM,V_SMALL_CATE,P_AMOUNT_OF_BUSI;
                    V_TRAN_CATE_BENEFIT :=0;
                    EXIT WHEN CUR_CONSUME_HISTORY%NOTFOUND;
                    V_TRAN_CATE_BENEFIT := BENEFIT_TRAN_CALC(V_CARD_CATE_NUM,P_TRAN_CATE_NUM,P_AMOUNT_OF_BUSI);
                    IF V_TRAN_CATE_BENEFIT !=0 THEN
                        INSERT INTO RECOMMEND_BENEFIT_SUM_TABLE(SMALL_CATE,CARD_BENEFIT,ANNUAL_FEE) VALUES(V_SMALL_CATE,V_TRAN_CATE_BENEFIT,V_ANNUAL_FEE);
                        DBMS_OUTPUT.PUT_LINE('들어는 오냐>?'||V_TRAN_CATE_BENEFIT);
                    ELSE
                        DBMS_OUTPUT.PUT_LINE('들어오지 말아야할게 들어왔구나?'||V_TRAN_CATE_BENEFIT);
                    END IF;      
            END LOOP; 
        CLOSE CUR_CONSUME_HISTORY;    
    END LOOP;
    COMMIT;
    OPEN CUR_BENEFIT FOR SELECT CEIL(SUM(CARD_BENEFIT)-(AVG(ANNUAL_FEE)/12)) AS CART_BENEFIT FROM RECOMMEND_BENEFIT_SUM_TABLE; 
END CALC_RECOMMENDED_BENEFIT_SUM;
/





--특정 멤버의 특정 카드와 비교하기 위함이다! 



VAR OL_CURSOR REFCURSOR
EXEC CALC_SELECTED_CARD_BENEFIT(10,'3212-8032-3960-6081','CR00001',:OL_CURSOR)
PRINT OL_CURSOR


CREATE OR REPLACE PROCEDURE CALC_SELECTED_CARD_BENEFIT(P_MEMBER_NUM IN NUMBER,P_CARD_NUM VARCHAR2,P_CARD_CATE_NUM IN VARCHAR2, CUR_BENEFIT OUT SYS_REFCURSOR)
AS 

P_AMOUNT_OF_BUSI NUMBER :=0;
P_TRAN_CATE_NUM VARCHAR2(60);
V_CARD_CATE_NUM VARCHAR2(40);
V_TRAN_CATE_BENEFIT NUMBER(8);
V_CARD_IMG_URL VARCHAR2(80);
V_ANNUAL_FEE NUMBER :=0;
V_SMALL_CATE VARCHAR2(100);

CURSOR CUR_CARD_DETAIL_BENEFIT
IS 
SELECT A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE
FROM CARD_DETAIL_BENEFIT A, CARD_IMG B,CARD_INFO C
WHERE A.CARD_CATE_NUM = B.CARD_CATE_NUM AND A.CARD_CATE_NUM = C.CARD_CATE_NUM AND C.CARD_CATE_NUM=P_CARD_CATE_NUM
GROUP BY A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE;

CURSOR CUR_RECOMMENDED_CARD_BENE
IS
SELECT * 
FROM RECOMMEND_BENEFIT_TABLE;

CURSOR CUR_CONSUME_HISTORY
IS 
SELECT TRAN_CATE_NUM,SMALL_CATE,CEIL(SUM(AMOUNT_OF_BUSI)/3)
FROM CARD_CONSUMPTION_HISTORY
WHERE MEMBER_NUM = P_MEMBER_NUM AND CARD_NUM = P_CARD_NUM
AND TO_DATE(DATE_OF_USE,'YYYY-MM-DD HH24:MI:SS') BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MM'),-3) AND LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1))
GROUP BY TRAN_CATE_NUM,SMALL_CATE;

BEGIN
    DELETE FROM RECOMMEND_BENEFIT_TABLE;
    OPEN CUR_CARD_DETAIL_BENEFIT;
    LOOP
        FETCH CUR_CARD_DETAIL_BENEFIT INTO V_CARD_CATE_NUM,V_CARD_IMG_URL,V_ANNUAL_FEE; 
        EXIT WHEN CUR_CARD_DETAIL_BENEFIT%NOTFOUND;
        OPEN CUR_CONSUME_HISTORY;
            LOOP 
                FETCH CUR_CONSUME_HISTORY INTO P_TRAN_CATE_NUM,V_SMALL_CATE,P_AMOUNT_OF_BUSI;
                    V_TRAN_CATE_BENEFIT :=0;
                    EXIT WHEN CUR_CONSUME_HISTORY%NOTFOUND;
                    V_TRAN_CATE_BENEFIT := BENEFIT_TRAN_CALC(V_CARD_CATE_NUM,P_TRAN_CATE_NUM,P_AMOUNT_OF_BUSI);
                    IF V_TRAN_CATE_BENEFIT !=0 THEN
                        INSERT INTO RECOMMEND_BENEFIT_TABLE(SMALL_CATE,CARD_BENEFIT) VALUES(V_SMALL_CATE,V_TRAN_CATE_BENEFIT);
                        DBMS_OUTPUT.PUT_LINE('들어는 오냐>?'||V_TRAN_CATE_BENEFIT);
                    ELSE
                        DBMS_OUTPUT.PUT_LINE('들어오지 말아야할게 들어왔구나?'||V_TRAN_CATE_BENEFIT);
                    END IF;      
            END LOOP; 
        CLOSE CUR_CONSUME_HISTORY;    
    END LOOP;
    COMMIT;
    OPEN CUR_BENEFIT FOR SELECT SMALL_CATE,SUM(CARD_BENEFIT) AS BENEFIT FROM RECOMMEND_BENEFIT_TABLE GROUP BY SMALL_CATE; 
END CALC_SELECTED_CARD_BENEFIT;
/

-- 카드 추천 영역에서 가맹점까지 표시해주고 싶음! 
VAR TEST_CURSOR REFCURSOR;
EXECUTE CALC_SELECTED_CARD_BENEFIT_ALI(1,'1823-6856-3323-3203','CR00005',:TEST_CURSOR);
PRINT TEST_CURSOR;

CREATE OR REPLACE PROCEDURE CALC_SELECTED_CARD_BENEFIT_ALI(P_MEMBER_NUM IN NUMBER,P_CARD_NUM VARCHAR2,P_CARD_CATE_NUM IN VARCHAR2, CUR_BENEFIT OUT SYS_REFCURSOR)
AS 

P_AMOUNT_OF_BUSI NUMBER :=0;
P_TRAN_CATE_NUM VARCHAR2(60);
V_CARD_CATE_NUM VARCHAR2(40);
V_TRAN_CATE_BENEFIT NUMBER(8);
V_CARD_IMG_URL VARCHAR2(80);
V_SMALL_CATE VARCHAR2(100);
V_ALI_TYPE VARCHAR2(90);
V_ANNUAL_FEE NUMBER :=0;
CURSOR CUR_CARD_DETAIL_BENEFIT
IS 
SELECT A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE
FROM CARD_DETAIL_BENEFIT A, CARD_IMG B,CARD_INFO C
WHERE A.CARD_CATE_NUM = B.CARD_CATE_NUM AND A.CARD_CATE_NUM = C.CARD_CATE_NUM AND C.CARD_CATE_NUM=P_CARD_CATE_NUM
GROUP BY A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE;

CURSOR CUR_RECOMMENDED_CARD_BENE
IS
SELECT * 
FROM MY_CARD_BENEFIT;

CURSOR CUR_CONSUME_HISTORY
IS 
SELECT TRAN_CATE_NUM,SMALL_CATE,ALI_TYPE,CEIL(SUM(AMOUNT_OF_BUSI)/3)
FROM CARD_CONSUMPTION_HISTORY
WHERE MEMBER_NUM = P_MEMBER_NUM AND CARD_NUM = P_CARD_NUM
AND TO_DATE(DATE_OF_USE,'YYYY-MM-DD HH24:MI:SS') BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MM'),-3) AND LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1))
GROUP BY TRAN_CATE_NUM,SMALL_CATE,ALI_TYPE;

BEGIN
    DELETE FROM MY_CARD_BENEFIT;
    OPEN CUR_CARD_DETAIL_BENEFIT;
    LOOP
        FETCH CUR_CARD_DETAIL_BENEFIT INTO V_CARD_CATE_NUM,V_CARD_IMG_URL,V_ANNUAL_FEE; 
        EXIT WHEN CUR_CARD_DETAIL_BENEFIT%NOTFOUND;
        OPEN CUR_CONSUME_HISTORY;
            LOOP 
                FETCH CUR_CONSUME_HISTORY INTO P_TRAN_CATE_NUM,V_SMALL_CATE,V_ALI_TYPE,P_AMOUNT_OF_BUSI;
                    V_TRAN_CATE_BENEFIT :=0;
                    EXIT WHEN CUR_CONSUME_HISTORY%NOTFOUND;
                    V_TRAN_CATE_BENEFIT := BENEFIT_TRAN_CALC(V_CARD_CATE_NUM,P_TRAN_CATE_NUM,P_AMOUNT_OF_BUSI);
                    IF V_TRAN_CATE_BENEFIT !=0 THEN
                        INSERT INTO MY_CARD_BENEFIT(SMALL_CATE,CARD_BENEFIT,ALI_TYPE) VALUES(V_SMALL_CATE,V_TRAN_CATE_BENEFIT,V_ALI_TYPE);
                        DBMS_OUTPUT.PUT_LINE('들어는 오냐>?'||V_TRAN_CATE_BENEFIT);
                    ELSE
                        DBMS_OUTPUT.PUT_LINE('들어오지 말아야할게 들어왔구나?'||V_TRAN_CATE_BENEFIT);
                    END IF;      
            END LOOP; 
        CLOSE CUR_CONSUME_HISTORY;    
    END LOOP;
    COMMIT;
    OPEN CUR_BENEFIT FOR SELECT SMALL_CATE,ALI_TYPE,SUM(CARD_BENEFIT) AS CARD_BENEFIT FROM MY_CARD_BENEFIT GROUP BY SMALL_CATE,ALI_TYPE ORDER BY SMALL_CATE; 
END CALC_SELECTED_CARD_BENEFIT_ALI;
/




CREATE OR REPLACE FUNCTION BENEFIT_TRAN_CALC(P_CARD_CATE_NUM IN VARCHAR2,P_TRAN_CATE_NUM IN VARCHAR2,P_AMOUNT IN NUMBER)
RETURN NUMBER
IS
    CURSOR CUR_CARD_DETAIL_BENEFIT IS SELECT BENE_RATE,BENE_LIMIT
        FROM CARD_DETAIL_BENEFIT
        WHERE CARD_CATE_NUM=P_CARD_CATE_NUM AND BENE_CODE = P_TRAN_CATE_NUM; 
    V_DISCOUNT NUMBER := 0;
    V_BENE_LIMIT NUMBER := 0;
    V_BENEFIT NUMBER :=0;
BEGIN
    OPEN CUR_CARD_DETAIL_BENEFIT;
    LOOP 
        FETCH CUR_CARD_DETAIL_BENEFIT INTO V_DISCOUNT,V_BENE_LIMIT;
        EXIT WHEN CUR_CARD_DETAIL_BENEFIT%NOTFOUND;
        IF
            P_AMOUNT * V_DISCOUNT>V_BENE_lIMIT THEN
            V_BENEFIT := V_BENE_LIMIT;
        ELSE 
            V_BENEFIT := P_AMOUNT * V_DISCOUNT;
        END IF;
    END LOOP;    
    RETURN V_BENEFIT;
    CLOSE CUR_CARD_DETAIL_BENEFIT;
END BENEFIT_TRAN_CALC;
/


--여러개의 카드가 나올 경우를 대비해 프로시저 생성함.
--
--CREATE GLOBAL TEMPORARY TABLE MY_CARD_BENEFIT_TABLE(
--    CARD_NAME VARCHAR2(50),
--    CARD_NUM VARCHAR2(30),
--    CARD_VALID_DATE VARCHAR2(40),
--    CARD_CVC_NUM VARCHAR2(20),
--    CARD_CATE_NUM VARCHAR2(30),
--    CARD_IMG_URL VARCHAR2(100)
--) ON COMMIT DELETE ROWS;


CREATE TABLE MY_CARD_BENEFIT_TABLE(
    CARD_NAME VARCHAR2(100),
    CARD_NUM VARCHAR2(30),
    CARD_VALID_DATE VARCHAR2(40),
    CARD_CVC_NUM VARCHAR2(20),
    CARD_CATE_NUM VARCHAR2(30),
    CARD_IMG_URL VARCHAR2(100)
);


VAR TEST_CURSOR REFCURSOR;
EXECUTE SHOW_MY_CARD_BENEFIT(10,:TEST_CURSOR);
PRINT TEST_CURSOR;





--3개월치로 이제 구해보자! recommend에서 호출할 예정임! 

CREATE OR REPLACE PROCEDURE CALC_CARD_CATE_BENEFIT_3(P_CARD_NUM IN VARCHAR2,CUR_BENEFIT_LIST OUT SYS_REFCURSOR)
AS   
    V_TRAN_CATE_NUM VARCHAR2(30);
    V_AMOUNT_OF_BUSI NUMBER(10);
    V_CARD_BENEFIT NUMBER(10);
    V_SMALL_CATE VARCHAR2(100);
    V_ALI_TYPE VARCHAR2(90);
    
    CURSOR CUR_CONSUME_HISTORY
    IS
    SELECT TRAN_CATE_NUM,CEIL(SUM(AMOUNT_OF_BUSI)/3)
    FROM CARD_CONSUMPTION_HISTORY
    WHERE CARD_NUM = P_CARD_NUM
    AND TO_DATE(DATE_OF_USE,'YYYY-MM-DD HH24:MI:SS') BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MM'),-3) AND LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1))
    GROUP BY TRAN_CATE_NUM;
    
    CURSOR CUR_SMALL_CATE
    IS 
    SELECT SMALL_CATE,ALI_TYPE 
    FROM CARD_BENEFIT_VIEW
    WHERE BENE_CODE = V_TRAN_CATE_NUM; 
    
BEGIN
    DELETE FROM MY_CARD_BENEFIT;
    OPEN CUR_CONSUME_HISTORY;
    LOOP
        FETCH CUR_CONSUME_HISTORY INTO V_TRAN_CATE_NUM,V_AMOUNT_OF_BUSI;
        EXIT WHEN CUR_CONSUME_HISTORY%NOTFOUND;
            OPEN CUR_SMALL_CATE;
            LOOP
                FETCH CUR_SMALL_CATE INTO V_SMALL_CATE,V_ALI_TYPE;
                EXIT WHEN CUR_SMALL_CATE%NOTFOUND;
            END LOOP;  
            CLOSE CUR_SMALL_CATE;
        V_CARD_BENEFIT := CALC_BENEFIT_SUM(V_TRAN_CATE_NUM,V_AMOUNT_OF_BUSI,P_CARD_NUM);
        IF V_CARD_BENEFIT !=0 THEN
            INSERT INTO MY_CARD_BENEFIT(SMALL_CATE,CARD_BENEFIT,ALI_TYPE) VALUES(V_SMALL_CATE,V_CARD_BENEFIT,V_ALI_TYPE);
        ELSE 
            DBMS_OUTPUT.PUT_LINE('INSERT 하면 안됨!');
        END IF;    
    END LOOP;
    COMMIT;
    OPEN CUR_BENEFIT_LIST FOR SELECT  SMALL_CATE,CARD_BENEFIT,ALI_TYPE FROM MY_CARD_BENEFIT ORDER BY SMALL_CATE;
END;
/






CREATE OR REPLACE PROCEDURE SHOW_MY_CARD_BENEFIT(P_MEMBER_NUM IN NUMBER,CUR_CARD_BENEFIT OUT SYS_REFCURSOR)
AS 
    V_CARD_SEG_NUM VARCHAR2(50);
    V_CARD_NAME VARCHAR2(100);
    V_CARD_NUM VARCHAR2(40);
    V_CARD_VALID_DATE VARCHAR2(50); 
    V_CARD_CVC_NUM VARCHAR2(20);
    V_CARD_IMG_URL VARCHAR2(200);
    V_CARD_CATE_NUM VARCHAR2(30);
    
    CURSOR CUR_CUSTOMER_CARD_LIST 
    IS 
    SELECT CARD_SEG_NUM FROM CUSTOMER_CARD_INFO WHERE MEMBER_NUM = P_MEMBER_NUM;
    
    CURSOR CUR_MY_CARD_INFO
    IS
    SELECT A.CARD_NAME,B.CARD_NUM,B.VALID_DATE,B.CVC_NUM,C.IMG_URL,A.CARD_CATE_NUM 
    FROM  CARD_INFO A,CUSTOMER_CARD_INFO B, CARD_IMG C   
    WHERE A.CARD_SEG_NUM = B.CARD_SEG_NUM AND A.CARD_CATE_NUM = C.CARD_CATE_NUM  AND A.CARD_SEG_NUM = V_CARD_SEG_NUM AND B.MEMBER_NUM = P_MEMBER_NUM;

BEGIN 
    DELETE FROM MY_CARD_BENEFIT_TABLE;
    OPEN CUR_CUSTOMER_CARD_LIST;
    LOOP    
        FETCH CUR_CUSTOMER_CARD_LIST INTO V_CARD_SEG_NUM;
        EXIT WHEN CUR_CUSTOMER_CARD_LIST%NOTFOUND;
        OPEN CUR_MY_CARD_INFO;
            LOOP
                FETCH CUR_MY_CARD_INFO INTO V_CARD_NAME,V_CARD_NUM,V_CARD_VALID_DATE,V_CARD_CVC_NUM,V_CARD_IMG_URL,V_CARD_CATE_NUM;
                EXIT WHEN CUR_MY_CARD_INFO%NOTFOUND;
                INSERT INTO MY_CARD_BENEFIT_TABLE VALUES(V_CARD_NAME,V_CARD_NUM,V_CARD_VALID_DATE,V_CARD_CVC_NUM,V_CARD_CATE_NUM,V_CARD_IMG_URL);
            END LOOP;
        CLOSE CUR_MY_CARD_INFO;
    END LOOP;
    CLOSE CUR_CUSTOMER_CARD_LIST;
    COMMIT;
    OPEN CUR_CARD_BENEFIT FOR SELECT CARD_NAME,CARD_NUM,CARD_VALID_DATE,CARD_CVC_NUM,CARD_CATE_NUM,CARD_IMG_URL FROM MY_CARD_BENEFIT_TABLE;

END SHOW_MY_CARD_BENEFIT;
/

--군집의 특성을 파악해주는 프로시저 구하기 






SELECT LARGE_CATE
FROM INDU_TYPE A,(SELECT INDUSTRY_CODE 
FROM CARD_BENE A,BENE_INFO B
WHERE A.BENE_CODE = B.BENE_CODE AND A.CARD_CATE_NUM = 'MU00001') B
WHERE A.INDU_CODE = B.INDUSTRY_CODE;


SELECT COUNT(LARGE_CATE)
FROM INDU_TYPE A,(SELECT INDUSTRY_CODE 
FROM CARD_BENE A,BENE_INFO B
WHERE A.BENE_CODE = B.BENE_CODE AND A.CARD_CATE_NUM = 'MU00001') B
WHERE A.INDU_CODE = B.INDUSTRY_CODE AND A.LARGE_CATE ='유통';

SELECT A.IMG_URL,B.CARD_NAME,B.ANNUAL_FEE,B.CARD_CATE_NUM,B.SORT_CARD,C.COMMENT_OF_CARD
FROM CARD_IMG A, CARD_INFO B,CARD_COMMENT C 
WHERE A.CARD_CATE_NUM = B.CARD_CATE_NUM AND C.CARD_CATE_NUM=A.CARD_CATE_NUM AND A.CARD_CATE_NUM = 'MU00001' 
GROUP BY A.IMG_URL,B.CARD_NAME,B.ANNUAL_FEE,B.CARD_CATE_NUM,B.SORT_CARD,C.COMMENT_OF_CARD
ORDER BY B.CARD_CATE_NUM;


SELECT * FROM CARD_BENE;
--특정 카테고리별로 분류해주는 카드 추천 서비스!
DROP TABLE SELECTED_CARD_BY_CATE;

CREATE TABLE SELECTED_CARD_BY_CATE(
    IMG_URL VARCHAR2(200),
    CARD_NAME VARCHAR2(200),
    ANNUAL_FEE NUMBER(8),
    CARD_CATE_NUM VARCHAR2(100),
    SORT_CARD VARCHAR2(50),
    COMMENT_OF_CARD VARCHAR2(200)
);

SET SERVEROUTPUT ON;

    SELECT COUNT(LARGE_CATE)
    FROM INDU_TYPE A,(SELECT INDUSTRY_CODE 
    FROM CARD_BENE A,BENE_INFO B
    WHERE A.BENE_CODE = B.BENE_CODE AND A.CARD_CATE_NUM = 'CR00001') B
    WHERE A.INDU_CODE = B.INDUSTRY_CODE AND A.LARGE_CATE = '요식/유흥';




CREATE OR REPLACE PROCEDURE DISPLAY_CARD_BY_SELECTED_CATEGORY(P_CONSUME_CATE IN VARCHAR2,CUR_CARD_IMG OUT SYS_REFCURSOR)
AS
    V_CARD_CATE_NUM VARCHAR2(100);
    V_IMG_URL VARCHAR2(200);
    V_CARD_NAME VARCHAR2(200);
    V_ANNUAL_FEE NUMBER(8);
    V_SORT_CARD VARCHAR2(50);
    V_COMMENT_OF_CARD VARCHAR2(300);
    V_SUM NUMBER :=0;
    
    CURSOR CARD_CATE_CUR 
    IS
    SELECT DISTINCT CARD_CATE_NUM FROM CARD_BENE;
    
    CURSOR SELECTED_CATE_COUNT_CUR 
    IS
    SELECT COUNT(LARGE_CATE)
    FROM INDU_TYPE A,(SELECT INDUSTRY_CODE 
    FROM CARD_BENE A,BENE_INFO B
    WHERE A.BENE_CODE = B.BENE_CODE AND A.CARD_CATE_NUM = V_CARD_CATE_NUM) B
    WHERE A.INDU_CODE = B.INDUSTRY_CODE AND A.LARGE_CATE = P_CONSUME_CATE;
    
    CURSOR SELECTED_CARD_INFO_CUR
    IS
    SELECT A.IMG_URL,B.CARD_NAME,B.ANNUAL_FEE,B.SORT_CARD,C.COMMENT_OF_CARD
    FROM CARD_IMG A, CARD_INFO B,CARD_COMMENT C 
    WHERE A.CARD_CATE_NUM = B.CARD_CATE_NUM AND C.CARD_CATE_NUM= A.CARD_CATE_NUM AND A.CARD_CATE_NUM = V_CARD_CATE_NUM 
    GROUP BY A.IMG_URL,B.CARD_NAME,B.ANNUAL_FEE,B.CARD_CATE_NUM,B.SORT_CARD,C.COMMENT_OF_CARD;
    
BEGIN
    DELETE FROM SELECTED_CARD_BY_CATE;
    OPEN CARD_CATE_CUR;
    LOOP
        FETCH CARD_CATE_CUR INTO V_CARD_CATE_NUM;
        EXIT WHEN CARD_CATE_CUR%NOTFOUND;
        OPEN SELECTED_CATE_COUNT_CUR;
            LOOP
                FETCH SELECTED_CATE_COUNT_CUR INTO V_SUM;
                EXIT WHEN SELECTED_CATE_COUNT_CUR%NOTFOUND;
                IF V_SUM !=0 THEN
                    OPEN SELECTED_CARD_INFO_CUR;
                        LOOP
                            FETCH SELECTED_CARD_INFO_CUR INTO V_IMG_URL,V_CARD_NAME,V_ANNUAL_FEE,V_SORT_CARD,V_COMMENT_OF_CARD;
                            EXIT WHEN SELECTED_CARD_INFO_CUR%NOTFOUND;
                            INSERT INTO SELECTED_CARD_BY_CATE VALUES(V_IMG_URL,V_CARD_NAME,V_ANNUAL_FEE,V_CARD_CATE_NUM,V_SORT_CARD,V_COMMENT_OF_CARD);
                        END LOOP;
                    CLOSE SELECTED_CARD_INFO_CUR;    
                ELSE 
                    DBMS_OUTPUT.PUT_LINE('INSERT 하면 안됨!');               
                END IF;           
            END LOOP; 
        CLOSE SELECTED_CATE_COUNT_CUR;
    END LOOP;
    COMMIT;
    OPEN CUR_CARD_IMG FOR SELECT IMG_URL,CARD_NAME,ANNUAL_FEE,CARD_CATE_NUM,SORT_CARD,COMMENT_OF_CARD FROM SELECTED_CARD_BY_CATE;
END;
/

VAR TEST_CURSOR REFCURSOR;
EXECUTE DISPLAY_CARD_BY_SELECTED_CATEGORY('요식/유흥',:TEST_CURSOR);
PRINT TEST_CURSOR;   


--멀티카드 
CREATE TABLE MULTI_CARD_RANK(
    FIRST_MULTI_CARD_CATE_NUM VARCHAR2(30),
    SECOND_MULTI_CARD_CATE_NUM VARCHAR2(30),
    FIRST_MULTI_CARD_IMG_URL VARCHAR2(100),
    SECOND_MULTI_CARD_IMG_URL VARCHAR2(100),
    FIRST_MULTI_CARD_ANNUAL_FEE NUMBER(8),
    SECOND_MULTI_CARD_ANNUAL_FEE NUMBER(8),
    FIRST_MULTI_CARD_NAME VARCHAR2(60),
    SECOND_MULTI_CARD_NAME VARCHAR(60),
    FIRST_MULTI_CARD_COMMENT VARCHAR2(100),
    SECOND_MULTI_CARD_COMMENT VARCHAR2(100),
    OBTAINED_BENEFIT NUMBER(8),
    FIRST_MULTI_CARD_BENEFIT NUMBER(8),
    SECOND_MULTI_CARD_BENEFIT NUMBER(8)
);

VAR TEST_CURSOR REFCURSOR;
EXECUTE CALC_MULTI_CARD_RANK(10,:TEST_CURSOR);
PRINT TEST_CURSOR;

VAR TEST_CURSOR REFCURSOR;
EXECUTE CALC_MULTI_CARD_RANK(297,:TEST_CURSOR);
PRINT TEST_CURSOR;


CREATE OR REPLACE PROCEDURE CALC_MULTI_CARD_RANK(P_MEMBER_NUM IN VARCHAR2,CUR_RANK_BENEFIT OUT SYS_REFCURSOR)
AS
    V_FIRST_MULTI_CARD_CATE_NUM VARCHAR2(30);
    V_SECOND_MULTI_CARD_CATE_NUM VARCHAR2(30);
    V_FIRST_MULTI_CARD_NAME VARCHAR2(50);
    V_SECOND_MULTI_CARD_NAME VARCHAR2(50);
    V_FIRST_MULTI_CARD_IMG VARCHAR2(130);
    V_SECOND_MULTI_CARD_IMG VARCHAR2(130);
    V_FIRST_MULTI_CARD_ANNUAL_FEE NUMBER(8);
    V_SECOND_MULTI_CARD_ANNUAL_FEE NUMBER(8);
    V_FIRST_MULTI_CARD_COMMENT VARCHAR2(100);
    V_SECOND_MULTI_CARD_COMMENT VARCHAR2(100);
    V_FIRST_MULTI_CARD_BENEFIT NUMBER(8) :=0;
    V_SECOND_MULTI_CARD_BENEFIT NUMBER(8) :=0;
    V_AMOUNT_OF_BUSI NUMBER(8);
    V_TRAN_CATE_NUM VARCHAR2(20);
    
    CURSOR CUR_CARD_DETAIL_BENEFIT_1
    IS 
    SELECT A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE,C.CARD_NAME,D.COMMENT_OF_CARD
    FROM CARD_DETAIL_BENEFIT A , CARD_IMG B,CARD_INFO C,CARD_COMMENT D
    WHERE A.CARD_CATE_NUM = B.CARD_CATE_NUM AND A.CARD_CATE_NUM = C.CARD_CATE_NUM AND A.CARD_CATE_NUM = D.CARD_CATE_NUM AND C.SORT_CARD='멀티 카드'
    GROUP BY A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE,C.CARD_NAME,D.COMMENT_OF_CARD;

    CURSOR CUR_CARD_DETAIL_BENEFIT_2
    IS 
    SELECT A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE,C.CARD_NAME,D.COMMENT_OF_CARD
    FROM CARD_DETAIL_BENEFIT A , CARD_IMG B,CARD_INFO C,CARD_COMMENT D
    WHERE A.CARD_CATE_NUM = B.CARD_CATE_NUM AND A.CARD_CATE_NUM = C.CARD_CATE_NUM AND A.CARD_CATE_NUM = D.CARD_CATE_NUM AND C.SORT_CARD='멀티 카드'
    GROUP BY A.CARD_CATE_NUM,B.IMG_URL,C.ANNUAL_FEE,C.CARD_NAME,D.COMMENT_OF_CARD;
    
    CURSOR CUR_CONSUME_HISTORY
    IS 
    SELECT TRAN_CATE_NUM,CEIL(SUM(AMOUNT_OF_BUSI)/3)
    FROM CARD_CONSUMPTION_HISTORY
    WHERE MEMBER_NUM = P_MEMBER_NUM
    AND TO_DATE(DATE_OF_USE,'YYYY-MM-DD HH24:MI:SS') BETWEEN ADD_MONTHS(TRUNC(SYSDATE,'MM'),-3) AND LAST_DAY(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1))
    GROUP BY TRAN_CATE_NUM;
    
    BEGIN 
        DELETE FROM MULTI_CARD_RANK;
        OPEN CUR_CARD_DETAIL_BENEFIT_1;
        LOOP 
            FETCH CUR_CARD_DETAIL_BENEFIT_1 INTO V_FIRST_MULTI_CARD_CATE_NUM,V_FIRST_MULTI_CARD_IMG,V_FIRST_MULTI_CARD_ANNUAL_FEE,V_FIRST_MULTI_CARD_NAME,V_FIRST_MULTI_CARD_COMMENT;
            EXIT WHEN CUR_CARD_DETAIL_BENEFIT_1%NOTFOUND;
            OPEN CUR_CARD_DETAIL_BENEFIT_2;
                LOOP
                    FETCH CUR_CARD_DETAIL_BENEFIT_2 INTO V_SECOND_MULTI_CARD_CATE_NUM,V_SECOND_MULTI_CARD_IMG,V_SECOND_MULTI_CARD_ANNUAL_FEE,V_SECOND_MULTI_CARD_NAME,V_SECOND_MULTI_CARD_COMMENT;
                    EXIT WHEN CUR_CARD_DETAIL_BENEFIT_2%NOTFOUND;
                    OPEN CUR_CONSUME_HISTORY;
                        LOOP
                            FETCH CUR_CONSUME_HISTORY INTO V_TRAN_CATE_NUM,V_AMOUNT_OF_BUSI;
                            EXIT WHEN CUR_CONSUME_HISTORY%NOTFOUND;
                             V_FIRST_MULTI_CARD_BENEFIT := BENEFIT_TRAN_CALC(V_FIRST_MULTI_CARD_CATE_NUM,V_TRAN_CATE_NUM,V_AMOUNT_OF_BUSI);
                             V_SECOND_MULTI_CARD_BENEFIT := BENEFIT_TRAN_CALC(V_SECOND_MULTI_CARD_CATE_NUM,V_TRAN_CATE_NUM,V_AMOUNT_OF_BUSI);
                             IF V_FIRST_MULTI_CARD_BENEFIT > V_SECOND_MULTI_CARD_BENEFIT THEN
                                INSERT INTO 
                                MULTI_CARD_RANK
                                (FIRST_MULTI_CARD_CATE_NUM,SECOND_MULTI_CARD_CATE_NUM,FIRST_MULTI_CARD_IMG_URL,SECOND_MULTI_CARD_IMG_URL,FIRST_MULTI_CARD_ANNUAL_FEE,SECOND_MULTI_CARD_ANNUAL_FEE,FIRST_MULTI_CARD_NAME,SECOND_MULTI_CARD_NAME,FIRST_MULTI_CARD_COMMENT,SECOND_MULTI_CARD_COMMENT,OBTAINED_BENEFIT,FIRST_MULTI_CARD_BENEFIT)
                                VALUES(V_FIRST_MULTI_CARD_CATE_NUM,V_SECOND_MULTI_CARD_CATE_NUM,V_FIRST_MULTI_CARD_IMG,V_SECOND_MULTI_CARD_IMG,V_FIRST_MULTI_CARD_ANNUAL_FEE,V_SECOND_MULTI_CARD_ANNUAL_FEE,V_FIRST_MULTI_CARD_NAME,V_SECOND_MULTI_CARD_NAME, V_FIRST_MULTI_CARD_COMMENT,V_SECOND_MULTI_CARD_COMMENT, V_FIRST_MULTI_CARD_BENEFIT,V_FIRST_MULTI_CARD_BENEFIT);
                             ELSE 
                                INSERT INTO 
                                MULTI_CARD_RANK
                                (FIRST_MULTI_CARD_CATE_NUM,SECOND_MULTI_CARD_CATE_NUM,FIRST_MULTI_CARD_IMG_URL,SECOND_MULTI_CARD_IMG_URL,FIRST_MULTI_CARD_ANNUAL_FEE,SECOND_MULTI_CARD_ANNUAL_FEE,FIRST_MULTI_CARD_NAME,SECOND_MULTI_CARD_NAME,FIRST_MULTI_CARD_COMMENT,SECOND_MULTI_CARD_COMMENT,OBTAINED_BENEFIT,SECOND_MULTI_CARD_BENEFIT)
                                VALUES(V_FIRST_MULTI_CARD_CATE_NUM,V_SECOND_MULTI_CARD_CATE_NUM,V_FIRST_MULTI_CARD_IMG,V_SECOND_MULTI_CARD_IMG,V_FIRST_MULTI_CARD_ANNUAL_FEE,V_SECOND_MULTI_CARD_ANNUAL_FEE,V_FIRST_MULTI_CARD_NAME,V_SECOND_MULTI_CARD_NAME, V_FIRST_MULTI_CARD_COMMENT,V_SECOND_MULTI_CARD_COMMENT, V_SECOND_MULTI_CARD_BENEFIT,V_SECOND_MULTI_CARD_BENEFIT);              
                            END IF;
                    END LOOP;
                    CLOSE CUR_CONSUME_HISTORY;
            END LOOP;
            CLOSE CUR_CARD_DETAIL_BENEFIT_2;
        END LOOP;    
        CLOSE CUR_CARD_DETAIL_BENEFIT_1;
        COMMIT;
        OPEN CUR_RANK_BENEFIT FOR SELECT FIRST_MULTI_CARD_CATE_NUM,SECOND_MULTI_CARD_CATE_NUM,FIRST_MULTI_CARD_IMG_URL,SECOND_MULTI_CARD_IMG_URL,FIRST_MULTI_CARD_NAME,SECOND_MULTI_CARD_NAME,FIRST_MULTI_CARD_COMMENT,SECOND_MULTI_CARD_COMMENT,SUM(OBTAINED_BENEFIT)-AVG(FIRST_MULTI_CARD_ANNUAL_FEE)*1/12-AVG(SECOND_MULTI_CARD_ANNUAL_FEE)*1/12 AS OBTAINED_BENEFIT,SUM(FIRST_MULTI_CARD_BENEFIT)-AVG(FIRST_MULTI_CARD_ANNUAL_FEE)*1/12 AS_FIRST_BENEFIT,SUM(SECOND_MULTI_CARD_BENEFIT)-AVG(SECOND_MULTI_CARD_ANNUAL_FEE)*1/12 AS SECOND_BENEFIT FROM MULTI_CARD_RANK GROUP BY FIRST_MULTI_CARD_CATE_NUM,SECOND_MULTI_CARD_CATE_NUM,FIRST_MULTI_CARD_IMG_URL,SECOND_MULTI_CARD_IMG_URL,FIRST_MULTI_CARD_NAME,SECOND_MULTI_CARD_NAME,FIRST_MULTI_CARD_COMMENT,SECOND_MULTI_CARD_COMMENT;
    END CALC_MULTI_CARD_RANK;
/






